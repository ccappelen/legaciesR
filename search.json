[{"path":"https://ccappelen.github.io/legaciesR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 legaciesr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ccappelen.github.io/legaciesR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christoffer Cappelen. Author, maintainer.","code":""},{"path":"https://ccappelen.github.io/legaciesR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cappelen C (2025). legaciesr: Data management LEGACIES data project. R package version 0.6.0, https://ccappelen.github.io/legaciesR/, https://www.legacies-project.com.","code":"@Manual{,   title = {legaciesr: Data management for the LEGACIES data project},   author = {Christoffer Cappelen},   year = {2025},   note = {R package version 0.6.0, https://ccappelen.github.io/legaciesR/},   url = {https://www.legacies-project.com}, }"},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"legaciesr","dir":"","previous_headings":"","what":"Data management for the LEGACIES data project","title":"Data management for the LEGACIES data project","text":"legaciesr package provides set functions used aggregate summarize mapping ID data collected LEGACIES project. allows users , .., (1) create contour polygons capturing territorial extent historical states different probability thresholds, (2) create grid various summary measures historical state presence, (3) add range commonly used covariates polygon grid data.","code":""},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data management for the LEGACIES data project","text":"can install development version legaciesr GitHub : plots produced rely custom functions available personal package can loaded following code:","code":"install.packages(\"devtools\") devtools::install_github(\"ccappelen/legaciesR\") library(legaciesr) library(sf)  library(dplyr) library(ggplot2) devtools::install_github(\"ccappelen/cappelenR\") library(cappelenR)"},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"package-overview-and-workflow","dir":"","previous_headings":"","what":"Package overview and workflow","title":"Data management for the LEGACIES data project","text":"legaciesr package composed number functions designed process match raw mapping state data collected LEGACIES project. can, cases, run independently , mostly meant used workflow described remainder README. short, consists Detecting fixing invalid geometries map data. Preprocessing map data match information ISD state data. Detecting potential errors data set. Generating contour polygons raw map data. (Optional) Generating grid cell data set various summary measures historical statehood. Matching grid cell data numerous data sources commonly used empirical applications. function (corresponding six steps) documented respective help documentation. guide outline basic features functions intended usage.","code":""},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"support-for-parallel-processing","dir":"","previous_headings":"","what":"Support for parallel processing:","title":"Data management for the LEGACIES data project","text":"functions enable parallel processing speed intensive tasks. Parallel processing implemented using [future::future] framework. two ways running jobs parallel: multicore uses ‘forking’ run multiple jobs parallel shared memory multisession launches set background R sessions. ‘Forking’ can faster multisession larger overhead associated copying active environment background R session (whereas forking processes shares memory). However, ‘forking’ supported Windows platforms considered unstable running within RStudio (Windows Unix systems MacOS). function automatically determine whether multicore supported platform choose appropriate plan. greater overhead associated multisession primarily first parallel run given R session (since background R sessions stays available additional parallel jobs). possible define [future::plan(“multisession”)] global environment, minimize overhead subsequent parallel jobs (apart first). function automatically detect multisession plan set globally , thus, close background sessions running. therefore recommended start script setting [future::plan]:","code":"future::plan(\"multisession\", workers = future::availableCores()) ## The above code sets up parallel processing on all available cores.  ## This can be changed with the 'workers' option."},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"reading-the-data","dir":"","previous_headings":"","what":"Reading the data","title":"Data management for the LEGACIES data project","text":"raw map ISD data currently included package therefore loaded user’s directory:","code":"shp_folder <- \"path to map data folder\" shp_name <- \"name of shapefile\" isd_path <- \"file path to isd data\" shp <- st_read(shp_path, shp_name) rm(shp_folder, shp_name)  isd <- readxl::read_xlsx(isd_path) rm(isd_path)"},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"invalid-geometries","dir":"","previous_headings":"","what":"Invalid geometries","title":"Data management for the LEGACIES data project","text":"maps raw data may “invalid” result errors many spatial data analyses. can happen kinds reasons; typically result crossing boundaries. fix_invalid() attempts detect fix invalid geometries. wrapper around sf::st_make_valid() function attempts reiteratively lower allowed precision rebuild valid geometries. function return data set fixed geometries (able fix ). returned data set include three columns describing status geometry, e.g., whether invalid whether successfully fixed. also (default) print summary many geometries invalid, many fixed, many unsuccessful. invalid geometries can happen many reasons may point data errors well, recommended check valid geometries run legaciesr::fix_invalid() identify potential issues.","code":"shp <- fix_invalid(shp) #> 447 (3.3 %) geometries were successfully rebuilt. #> 0 (0 %) geometries failed to rebuild as valid.  ## SUBET DATA TO AFRICA FOR QUICKER COMPUTATION shp <- shp[st_within(shp,                      rnaturalearthdata::countries50 |>                        filter(continent == \"Africa\") |>                        st_union(), sparse = F),]"},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"preprocessing","dir":"","previous_headings":"","what":"Preprocessing","title":"Data management for the LEGACIES data project","text":"next step prepare map data suitable format creating grid data, matching data ISD data, etc. therefore also necessary provide ISD data order match two data sets. default, function (1) expand data one row per year maps assigned range years, (2) fix potential issues three-digit years due approximate dating, (3) exclude maps without assignment, (4) add information capitals (names coordinates), (5) crop geometries coastlines*, (6) exclude maps marked “incomplete”, (7) exclude maps core regions (marked )**, (8) exclude maps years state considered sovereign (ISD data)***. options can disabled. also possible exclude maps based hierarchy coding states, .e., states coded tributary /dependency. * cropped geometries currently result errors creating contour polygons (work grid data) ** currently errors coding core regions. *** default, maps included fall within 5-year window state considered sovereign. size window can changed margin_sovereign option.","code":"shp <- prepare_shapes(shp = shp, state_data = isd,                       id_var = COWID, period_var = year,                       range_min = lyear, range_max = hyear,                       crop_to_land = FALSE, ## 'get_contours' currently not working when cropped to land                       exclude_core = FALSE ## Currently errors in 'core' and 'Core.Great' coding.                       )"},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"detecing-errors","dir":"","previous_headings":"","what":"Detecing errors","title":"Data management for the LEGACIES data project","text":"identify potential errors map data, function detect_errors checks various issues data set, existence duplicate COWIDs, missing COWIDs, errors year assignment (e.g., outside study range), geometries overlapping geometries COWID, capitals falling outside geometry given COWID. CAN indicate errors, mean necessarily error. function therefore used primarily easy way identify potential issues map data investigated . function returns various objects easy identification errors. First, prints report detailing whether many potential issues given type error. Second, returns list composed (1) original data columns indicating potential issues error type (2) separate subsets data set including observations identified potential issue error types. instance, code returns COWIDs geometries overlapping geometries COWID (might indicate either erroneous COWID assignment erroneous geocoding map).","code":"errors <- detect_errors(shp = shp, capital_data = isd,                         id_var = COWID, period_var = year,                         progress = FALSE) #>  #> POTENTIAL ERRORS: #> • 49 states with potentially duplicate COWIDs. #> • 0 shapes with empty geometries. #> • 2 shapes with missing IDs. #> • 36 COWIDs with only a single map. #> • 1130 maps with years missing or outside 1750-1920. #> • 817 maps that do not overlap with other shapes with the same ID. #> • 1583 maps where the capital falls outside the polygon. shp_non_overlap <- errors$report$non_overlap shp_non_overlap #> Simple feature collection with 817 features and 32 fields #> Active geometry column: geometry #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: -16.94491 ymin: -31.30053 xmax: 49.33274 ymax: 34.90809 #> Geodetic CRS:  WGS 84 #> # A tibble: 817 × 34 #> # Groups:   COWID [73] #>     year COWID COWNUM name          lyear hyear coder note  coasterror cityerror #>  * <dbl> <chr>  <int> <chr>         <dbl> <dbl> <chr> <chr>      <int>     <dbl> #>  1  1899 563       NA Transvaal      1899  1910 ca    <NA>          NA        10 #>  2  1900 563       NA Transvaal      1899  1910 ca    <NA>          NA        10 #>  3  1910 563       NA Transvaal      1899  1910 ca    <NA>          NA        10 #>  4  1870 99999     NA Liptako        1870  1870 cm    <NA>          NA        12 #>  5  1866 99999     NA Orange Free …  1866  1866 cm    <NA>          NA         6 #>  6  1870 AGA     4783 Agaie          1870  1870 cm    <NA>          NA        16 #>  7  1787 AIR     4361 Wuste Agades   1787  1787 ss    Spli…         NA        NA #>  8  1795 AIR     4361 Agades         1795  1795 ss    <NA>          NA        NA #>  9  1790 AIR     4361 Agades         1790  1790 ss    <NA>          NA        NA #> 10  2019 AIR     4361 Asben          2019  2019 ss    Bord…         NA        NA #> # ℹ 807 more rows #> # ℹ 24 more variables: sourcetype <int>, `Core/Great` <int>, source <chr>, #> #   core <int>, id <dbl>, layer <chr>, path <chr>, lyear_str <chr>, #> #   core_str <chr>, geometry <GEOMETRY [°]>, geom_valid <lgl>, rebuilt <lgl>, #> #   snap_precision <dbl>, capital_names <chr>, capital_coords <MULTIPOINT [°]>, #> #   incomplete <lgl>, in_spell <lgl>, empty_geom <lgl>, missing_id <lgl>, #> #   single_map <lgl>, year_outside <lgl>, year_na <lgl>, non_overlap <lgl>, …"},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"create-contour-polygons","dir":"","previous_headings":"","what":"Create contour polygons","title":"Data management for the LEGACIES data project","text":"Contour polygons capture varying degrees given area covered digitized maps. contours divide region covered union maps custom intervals share maps covering given area. default, function divides territory four contours (correponding 0-1, 0.25-1, 0.5-5, 0.75-1). number percentiles can specified cuts option (see documentation details). code plots contour polygons Sokoto Caliphate:  default, function summarizes maps across entire period (.e. 1750-1920). However, also possible specify contour polygons drawn separately specified period (see documentation details).","code":"df_contour <- get_contours(shp, id_var = COWID) #> Jobs running sequentially. #> ℹ Reverts to original plan after running. # Load map of Africa afr <- rnaturalearthdata::countries50 |>   filter(continent == \"Africa\")  # Plot contour polygons  df_contour |>   filter(COWID == \"SOK\") |>   ggplot() +   geom_sf(data = afr, fill = \"grey90\", color = \"grey20\") +   geom_sf(aes(fill = label), color = NA) +   scale_fill_viridis_d(option = \"plasma\", direction = 1, na.value = \"NA\") +   labs(fill = \"Share of polygons\") +   cappelenR::my_maptheme() +   cappelenR::coord_bbox(df_contour |> filter(COWID == \"SOK\"),                         expand_x = 6, expand_y = 3) +   theme(legend.position = \"bottom\", legend.justification = \"center\",         legend.title.position = \"top\") df_contour_panel <- get_contours(shp, id_var = COWID, by_period = TRUE, period_var = year)  df_contour_panel |>   filter(COWID == \"SOK\") |>   ggplot() +   geom_sf(data = afr, fill = \"grey90\", color = \"grey20\") +   geom_sf(aes(fill = label), color = NA) +   scale_fill_viridis_d(option = \"plasma\", direction = 1, na.value = \"NA\") +   labs(fill = \"Share of maps\") +   cappelenR::my_maptheme() +   cappelenR::coord_bbox(df_contour |> filter(COWID == \"SOK\"),                         expand_x = 6, expand_y = 3) +   theme(legend.position = \"bottom\", legend.justification = \"center\",         legend.title.position = \"top\") +   facet_wrap(~ period)"},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"create-grid-data","dir":"","previous_headings":"","what":"Create grid data","title":"Data management for the LEGACIES data project","text":"Finally, get_grid allows create grid cell data set various summary measures many maps cover particular area. default, function creates grid covering entire extent provided map data set, also possible specify particular area providing raster object extent. function calculates several different operationalizations overall idea capturing extent given area controlled state. different measures rely different rules specyfing state use summarizing share maps one state covering particular grid cell. polysh_largest_count: share polygons grid cell state largest total number polygons. polysh_largest_area: share polygons grid cell state largest single polygon (NB: operataionalized differently based area union polygons state median area polygons state). polysh_largest_share: share polygons grid cell state largest share grid cell. polysh_across: average share polygons across states intersecting given grid cell. addition , two measures capturing slightly different concepts related borders contested territory. bordersh: share polygons border intersecting given grid cell, relative polygons intersecting grid cell (across states). higher share indicates area likely border region. contested: measure capturing idea contested territory. calculated negative sum state-specific shares polygons intersecting grid cell weighted logarithm share: , state-specific share polygons intersecting grid cell. (NB: measure still development exact equation might change.) output (default) list containing raster object (r) used creating gridded data set along actual grid data set (df). plot particular variable, can extract raster object assign values particular variable object. See :  , also possible create panel version grid data, divided specified period (default create panel 20-year period): Plotting panel data requires creating different layer raster object period assigning values period. code provides function .","code":"df_grid <- get_grid(shp, id_var = COWID, period_var = year) # Extract raster share_largest_count <- df_grid$r  # Assign values to grid cells terra::values(share_largest_count) <- df_grid$data$polysh_largest_count  # Plot grid ggplot() +   geom_sf(data = afr) +   tidyterra::geom_spatraster(data = share_largest_count, alpha = 0.7) +   scale_fill_viridis_c(option = \"plasma\", direction = -1, na.value = NA) +   labs(fill = \"Share of polygons for the state with the largest \\nnumber of polygons in total\") +   guides(fill = guide_colorbar(barwidth = 15)) +   cappelenR::my_maptheme() +   cappelenR::coord_bbox(afr) +   theme(legend.position = \"bottom\", legend.title.position = \"top\",         legend.justification = \"center\", legend.margin = margin(-2,0,0,0,unit = \"cm\"),         axis.ticks = element_blank(),         legend.title = element_text(size = 12)) df_grid_panel <- get_grid(shp, id_var = COWID, by_period = TRUE, period_var = year) # Define function for extracting raster grid and values for given variable # This might be moved to its own proper function in the package create_grid_panel <- function(x, var) {   period_temp <- unique(x$data$period)   r_temp <- x$r   r_panel <- r_temp   for (i in seq_along(period_temp[-1])) {     terra::add(r_panel) <- r_temp   }   terra::set.names(r_panel, period_temp)   for (i in period_temp) {     terra::values(r_panel[[i]]) <- x$data[x$data$period == i, var]   }   return(r_panel) }  share_largest_count_panel <- create_grid_panel(   x = df_grid_panel,    var = \"polysh_largest_count\") # Plot grid for each period ggplot() +   geom_sf(data = afr) +   tidyterra::geom_spatraster(data = share_largest_count_panel, alpha = 0.7) +   scale_fill_viridis_c(option = \"plasma\", direction = -1, na.value = NA) +   labs(fill = \"Share of polygons for the state with the largest \\nnumber of polygons in total\",        x = NULL) +   guides(fill = guide_colorbar(barwidth = 15)) +   cappelenR::my_maptheme() +   cappelenR::coord_bbox(afr) +   theme(legend.position = \"bottom\", legend.title.position = \"top\",         legend.justification = \"center\",         legend.title = element_text(size = 12),         axis.ticks = element_blank()         ) +   facet_grid(~ lyr)"},{"path":"https://ccappelen.github.io/legaciesR/index.html","id":"adding-covariates-to-grid-data","dir":"","previous_headings":"","what":"Adding covariates to grid data","title":"Data management for the LEGACIES data project","text":"order add additional covariates grid data, necessary provide path folder containing relevant data. folder located LEGACIES OneDrive folder called “covariates”. Thus, path end following “…/legacies_project/covariates”. function takes output get_grid adds specified covariates data set. default, covariates included, possible specify covariates include. moment, commonly used geographic covariates included, added. Adding covariates panel version grid data follows exact structure:","code":"covar_path <- \".../legacies_project\" df_grid <- get_covariates(df_grid, path = covar_path) #> ℹ 1/5: Extracing covariates - Terrain #> ✔ 1/5: Extracing covariates - Terrain [32.5s] #>  #> ℹ 2/5: Extracing covariates - Climate #> ✔ 2/5: Extracing covariates - Climate [123ms] #>  #> ℹ 3/5: Extracing covariates - Crops #> ✔ 3/5: Extracing covariates - Crops [4ms] #>  #> ℹ 4/5: Extracing covariates - Rivers #> ✔ 4/5: Extracing covariates - Rivers [3m 55.9s] #>  #> ℹ 5/5: Extracing covariates - Coast #> ✔ 5/5: Extracing covariates - Coast [55.6s] #> df_grid_panel <- get_covariates(df_grid_panel, path = covar_path) #> ℹ 1/5: Extracing covariates - Terrain #> ✔ 1/5: Extracing covariates - Terrain [30.2s] #>  #> ℹ 2/5: Extracing covariates - Climate #> ✔ 2/5: Extracing covariates - Climate [122ms] #>  #> ℹ 3/5: Extracing covariates - Crops #> ✔ 3/5: Extracing covariates - Crops [5ms] #>  #> ℹ 4/5: Extracing covariates - Rivers #> ✔ 4/5: Extracing covariates - Rivers [3m 19.2s] #>  #> ℹ 5/5: Extracing covariates - Coast #> ✔ 5/5: Extracing covariates - Coast [51.4s] #>"},{"path":"https://ccappelen.github.io/legaciesR/reference/contour_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Contour Polygons — contour_polygons","title":"Create Contour Polygons — contour_polygons","text":"function creates contour polygons multiple overlapping polygons.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/contour_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Contour Polygons — contour_polygons","text":"","code":"contour_polygons(   shp,   cuts = 4,   id_vars,   res = 1/30,   nmap_threshold = 2,   smoothing = TRUE,   invalid_geom = c(\"stop\", \"fix\", \"exclude\"),   include_higher = TRUE )"},{"path":"https://ccappelen.github.io/legaciesR/reference/contour_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Contour Polygons — contour_polygons","text":"shp sf dataframe aggregated. Must consist one feature. cuts Integer length 1 specifying number (equally spaced) contour polygons returned. example, cuts = 10 function return 10 polygons representing 10 deciles (0-0.1, 0.1-0.2, ...). id_vars Group identifiers. res Resolution raster (degrees) used calculate polygon density. Higher resolution (.e., lower numbers) creates smoother borders also increases processing time. Default 1/30 degrees. nmap_threshold Integer indicating number geometries required. Default 2. threshold 1, single geometry returned unmodified. smoothing Logical, whether apply smoothing polygonizing raster. Default TRUE. invalid_geom Character, handle invalid geometries. \"stop\", returns error invalid geometries; \"exclude\", invalid geometries removed calculating contours; \"fix\", invalid geometries rebuilt using fix_invalid. recommended check invalid geometries run fix_invalid separately. include_higher logical, whether contour polygons include percentiles current interval. TRUE (default), 50 % polygon include areas covered least 50 % shapes (just within specified interval, e.g., 0.75-1, 0.50-1, 0.25-1...). FALSE, polygon include areas within specified interval (e.g., 0.75-1, 0.50-0.75, 0.25-0.50...).","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/contour_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Contour Polygons — contour_polygons","text":"Returns sf dataframe number features specified cuts. density, percentile, stored columns prob label.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/create_random_polygons_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create random overlapping polygons — create_random_polygons_df","title":"Create random overlapping polygons — create_random_polygons_df","text":"Create random overlapping polygons","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/create_random_polygons_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create random overlapping polygons — create_random_polygons_df","text":"","code":"create_random_polygons_df(   ext,   n = 5,   nmap_min = 50,   nmap_max = 200,   year_min = 1800,   year_max = 1900,   n.pnts = 10,   progress = TRUE )"},{"path":"https://ccappelen.github.io/legaciesR/reference/create_random_polygons_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create random overlapping polygons — create_random_polygons_df","text":"ext sf object, within polygons sampled. NULL, use polygon Africa extent extent object (rnaturalearthdata::countries50). n Integer, number groups create nmap_min Integer, minimum number features within group nmap_max Integer, maximum number features within group year_min Integer, minimum year year_max Integer, maximum year n.pnts Integer, number points sample feature create polygon progress Logical, whether show progress bar","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/create_random_polygons_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create random overlapping polygons — create_random_polygons_df","text":"sf dataframe random overlapping polygons","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/detect_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect potential errors in maps — detect_errors","title":"Detect potential errors in maps — detect_errors","text":"Detect potential errors maps","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/detect_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect potential errors in maps — detect_errors","text":"","code":"detect_errors(   shp,   capital_data,   id_var,   period_var,   errors,   dist,   parallel = TRUE,   ncores,   progress = TRUE,   report = TRUE,   returnList = TRUE )"},{"path":"https://ccappelen.github.io/legaciesR/reference/detect_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect potential errors in maps — detect_errors","text":"shp sf dataframe containing geometries capital_data Dataframe containing information capitals (year). id_var period_var names shp. id_var Name grouping variable (e.g., COWID) period_var Name year variable errors Character vector errors search . See details. dist Minimum allowable distance (km) capitals can outside polygons. parallel Whether use parallel processing. Default TRUE. ncores Number cores use parallel processing. Default use available cores. progress Whether print progress updates. Default TRUE. report Whether output report potential errors. Default sf dataframe columns error detection. returnList Whether return list containing full sf data frame separate data frames error type (default) just full sf data frame. full sf data frame either way include columns indicating potential errors type.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/detect_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect potential errors in maps — detect_errors","text":"Data frame id_duplicates Whether COWID COWNUM align, .e. duplicate COWIDs different COWNUMs? missing_id Whether geometries missing id_var. singles Whether COWIDs one map (may indicate wrong COWID). year Whether polygons years outside study window (.e. 1750-1920) year missing. overlap Whether COWIDs one polygons overlap polygons. capital Whether capitals associated COWID falls outside polygons. option dist can used specify minimum allowable distance. empty Check whether empty geometries.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/example_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data set — example_df","title":"Example data set — example_df","text":"data set grouped polygons (id year) resembling data structure package designed handle. polygons generated randomly reflect actual political entities (historical contemporary).","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/example_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data set — example_df","text":"","code":"example_df"},{"path":[]},{"path":"https://ccappelen.github.io/legaciesR/reference/example_df.html","id":"example-df","dir":"Reference","previous_headings":"","what":"example_df","title":"Example data set — example_df","text":"data frame 7,240 rows 60 columns: id ID number fictional country name Name fictional country year Year territorial extent","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/fix_invalid.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix Invalid Geometries — fix_invalid","title":"Fix Invalid Geometries — fix_invalid","text":"Rebuilds invalid geometries. necessary, functions iteratively lower snapping precision default options inadequate.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/fix_invalid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix Invalid Geometries — fix_invalid","text":"","code":"fix_invalid(   shp,   max_precision = 10^7,   min_precision = 10,   stop_if_invalid = FALSE,   progress = TRUE,   parallel = NULL,   ncores,   report = TRUE,   reportColumns = TRUE )"},{"path":"https://ccappelen.github.io/legaciesR/reference/fix_invalid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix Invalid Geometries — fix_invalid","text":"shp sf dataframe. max_precision Integer, maximum level precision s2::s2_options(), default 10^7. min_precision Integer, minimum allowed precision s2::s2_options(), default 10. geometry invalid rebuilding minimum precision allowed, function return error stop_if_invalid TRUE warning otherwise. stop_if_invalid Logical, whether function return error fails rebuild valid geometry. error message indicate row number invalid geometry. progress Logical, whether progress bar displayed. Default TRUE. parallel Logical, whether use parallel processing ncores number cores. See details . ncores Integer, number cores use parallel processing. Default available cores minus 1. report Logical, whether report number valid, rebuilt, invalid geometries. reportColumns FALSE, report generated. reportColumns Logical, whether return status geometry new columns (geom_valid, rebuilt, snap_precision).","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/fix_invalid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix Invalid Geometries — fix_invalid","text":"Returns sf dataframe number features input. dataframe includes three new columns: geom_valid indicates whether original geometry valid (TRUE), rebuilt indicates geometry successfully rebuilt, snap_precision indicates snapping precision used rebuild geometry (rebuilt FALSE, snap_precision indicates minimum snapping precision led invalid geometry).","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/fix_invalid.html","id":"support-for-parallel-processing","dir":"Reference","previous_headings":"","what":"Support for parallel processing","title":"Fix Invalid Geometries — fix_invalid","text":"Parallel processing implemented using future::future framework. two ways running jobs parallel: multicore uses 'forking' run multiple jobs parallel shared memory multisession launches set background R sessions. 'Forking' can faster multisession larger overhead associated copying active environment background R session (whereas forking processes shares memory). However, 'forking' supported Windows platforms considered unstable running within RStudio (Windows Unix systems MacOS). function automatically determine whether multicore supported platform choose appropriate plan. greater overhead associated multisession primarily first parallel run given R session (since background R sessions stays available additional parallel jobs). possible define future::plan() global environment, minimize overhead subsequent parallel jobs (apart first). function automatically detect multisession plan set globally , thus, close background sessions running.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_contours.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Contour Polygons Across Groups — get_contours","title":"Get Contour Polygons Across Groups — get_contours","text":"function creates contour polygons across multiple groups, either group alone combination time column.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_contours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Contour Polygons Across Groups — get_contours","text":"","code":"get_contours(   shp,   id_var,   by_period = FALSE,   interval = NULL,   period_var,   cuts = 4,   include_higher = TRUE,   nmap_threshold = 5,   invalid_geom = c(\"stop\", \"fix\", \"exclude\"),   smoothing = TRUE,   returnList = FALSE,   progress = TRUE,   parallel = NULL,   ncores,   ... )"},{"path":"https://ccappelen.github.io/legaciesR/reference/get_contours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Contour Polygons Across Groups — get_contours","text":"shp sf dataframe containing geometries (polygons). id_var Name grouping variable. by_period Logical, indicating shapes divided groups time addition IDs. Default FALSE. interval Scalar vector indicating intervals group . NULL (default), intervals automatically set 20 (years) include full range (.e. seq(min, max, 20)). user specification, value can either scalar, indicating length intervals (case full range used), vector specifying exact breaks, including start first interval end last interval. period_var Name period variable used time grouping. argument necessary by_period TRUE. cuts Integer length 1 specifying number (equally spaced) contour polygons returned. example, cuts = 10 function return 10 polygons representing 10 deciles (0-0.1, 0.1-0.2, ...). include_higher logical, whether contour polygons include percentiles current interval. TRUE (default), 50 % polygon include areas covered least 50 % shapes (just within specified interval, e.g., 0.75-1, 0.50-1, 0.25-1...). FALSE, polygon include areas within specified interval (e.g., 0.75-1, 0.50-0.75, 0.25-0.50...). nmap_threshold Integer, indicating number shapes required within group. Default 5. invalid_geom Character, handle invalid geometries. \"stop\", returns error invalid geometries; \"exclude\", invalid geometries removed calculating contours; \"fix\", invalid geometries rebuilt using fix_invalid. recommended check invalid geometries run fix_invalid separately. smoothing Logical, whether apply smoothing polygonizing raster. Default TRUE. returnList Logical, whether return list geometries group. Default return sf dataframe containing geometries. progress Logical, whether show progress bar. parallel Logical, whether use parallel processing ncores number cores. See details . ncores Integer, number cores use parallel processing. Default available cores minus 1. ... Additional arguments passed contour_polygons.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_contours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Contour Polygons Across Groups — get_contours","text":"Returns either sf dataframe (default) list sf dataframes (one list item per group).","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_contours.html","id":"support-for-parallel-processing","dir":"Reference","previous_headings":"","what":"Support for parallel processing","title":"Get Contour Polygons Across Groups — get_contours","text":"Parallel processing implemented using future::future framework. two ways running jobs parallel: multicore uses 'forking' run multiple jobs parallel shared memory multisession launches set background R sessions. 'Forking' can faster multisession larger overhead associated copying active environment background R session (whereas forking processes shares memory). However, 'forking' supported Windows platforms considered unstable running within RStudio (Windows Unix systems MacOS). function automatically determine whether multicore supported platform choose appropriate plan. greater overhead associated multisession primarily first parallel run given R session (since background R sessions stays available additional parallel jobs). possible define future::plan() global environment, minimize overhead subsequent parallel jobs (apart first). function automatically detect multisession plan set globally , thus, close background sessions running.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge LEGACIES data with covariates — get_covariates","title":"Merge LEGACIES data with covariates — get_covariates","text":"Merge LEGACIES data covariates","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge LEGACIES data with covariates — get_covariates","text":"","code":"get_covariates(   x,   vars,   grid_id = gid,   path,   progress = TRUE,   parallel = FALSE,   coords )"},{"path":"https://ccappelen.github.io/legaciesR/reference/get_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge LEGACIES data with covariates — get_covariates","text":"x List named elements r, object class SpatRaster, data, object class data.frame, named object class data.frame. list object returned get_grid function return = \"list\". vars Covariate data merge. Default includes variables. See details . grid_id Name column identifying grid cell. Default gid follows convention get_grid. path Character string specifying path name LEGACIES team folder. Depends user's computer, generally along lines \"~/user/OneDrive-NTNU/legacies-project\". progress Logical, whether progress updates displayed. parallel Logical, whether parallelize jobs (CURRENTLY USED) coords Character vector length two specifying names coordinate (longitude/latitude) variables. Default c(\"lon\", \"lat\") follows convention get_grid.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge LEGACIES data with covariates — get_covariates","text":"Data frame list data frame SpatRaster. default, covariates included, also possible specify covariates include argument vars, takes character vector input. following data available: terrain . climate . crops . rivers . coast","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create grid summarizing overlapping polygons. — get_grid","title":"Create grid summarizing overlapping polygons. — get_grid","text":"Create gridded data group (group year) summarizing number polygons covering given grid cell.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create grid summarizing overlapping polygons. — get_grid","text":"","code":"get_grid(   shp,   ras,   raster_from_shp = TRUE,   res = 1/2,   by_period = FALSE,   id_var,   period_var,   interval = NULL,   nmap_threshold = 5,   output,   subset = NULL,   parallel = TRUE,   ncores,   updates = TRUE,   return = c(\"list\", \"data\"),   fix_invalid = FALSE )"},{"path":"https://ccappelen.github.io/legaciesR/reference/get_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create grid summarizing overlapping polygons. — get_grid","text":"shp Shape ras Raster raster_from_shp Logical, TRUE, using extent shp define grid. FALSE, ras missing, grid generated based extent rnaturalearthdata::countries50. FALSE ras missing, ras used. res Resolution by_period Whether group period id_var ID variable name period_var Period variable name interval Scalar vector indicating intervals group . NULL (default), intervals automatically set 20 (years) include full range (.e. seq(min, max, 20)). user specification, value can either scalar, indicating length intervals (case full range used), vector specifying exact breaks, including start first interval end last interval. nmap_threshold Integer, indicating number shapes required within group. Default 5. output Character vector. See details. subset one-sided formula. provided, resulting grid data based observations defined argument. example, subset = ~ year > 1850. parallel Logical, whether use parallel processing ncores number cores. ncores Integer, number cores use parallel processing. Default available cores minus 1. updates Logical return List data.frame fix_invalid Logical","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/get_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create grid summarizing overlapping polygons. — get_grid","text":"Data frame grid cell--state (grid cell--state--year) several summary measures polygons shp. default, summary measures calculated, also possible specify measures calculate argument output, takes character vector input. following summary measures available: count_across Number polygons intersecting grid cell number distinct states intersecting grid cell. share_largest_count Share polygons state largest number polygons total. share_largest_area Share polygons state largest area. share_largest_share Share polygons state largest share grid cell. share_mean Average share polygons across states intersecting grid cell. borders Total number state borders intersecting grid cell share borders relative total number states intersecting. contested Entropy-based measure contested territory calculated using equation \\(E = -\\sum{}p*ln(p)\\), \\(p\\) state-specific share polygons intersecting grid cell.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/prepare_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare shapefiles — prepare_shapes","title":"Prepare shapefiles — prepare_shapes","text":"function prepares data processing functions `legaciesr' package, e.g., expands rows maps coded range (rather specific year), excludes certain maps, etc.","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/prepare_shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare shapefiles — prepare_shapes","text":"","code":"prepare_shapes(   shp,   state_data,   id_var,   period_var,   range_min,   range_max,   fix_year = TRUE,   year_na = TRUE,   expand_range = TRUE,   match_capitals = TRUE,   exclude_hierarchy = c(\"none\", \"tributary\", \"dependency\", \"all\"),   exclude_core = TRUE,   exclude_incomplete = TRUE,   exclude_sovereign = TRUE,   margin_sovereign = 5,   crop_to_land = TRUE )"},{"path":"https://ccappelen.github.io/legaciesR/reference/prepare_shapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare shapefiles — prepare_shapes","text":"shp sf dataframe state_data dataframe state ID data id_var ID variable, must shp state_data period_var Year variable, must shp state_data range_min Name variable lower year interval range_max Name variable upper year interval fix_year Logical, whether fix three-digit years. Default TRUE. See details. year_na Logical, whether exclude maps year indication (exact range) expand_range Logical, whether expand rows maps year interval, default TRUE. See details. match_capitals Logical, whether add information capital cities shp data. Default TRUE. See details. exclude_hierarchy Character vector, whether exclude maps states subordinated (tributary dependency). none (default) keep maps regardless hierarchy status, tributary exclude tributary states (hierarchy == 1), dependency exclude dependencies (hierarchy == 2), exclude tributaries dependencies. See also combine_hierarchy. exclude_core Exclude maps coded core (.e., include complete shape core periphery). Default TRUE. exclude_incomplete Exclude maps incomplete borders. Default TRUE. exclude_sovereign Exclude maps states sovereign time map. See details. margin_sovereign Number years state sovereign map still included (exclude_sovereign TRUE). Default 5 years. crop_to_land Logical, whether crop geometries land (default TRUE)","code":""},{"path":"https://ccappelen.github.io/legaciesR/reference/prepare_shapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare shapefiles — prepare_shapes","text":"sf dataframe. details: expand_year Expands rows maps interval range rather specific year. lower upper limits always retained. limits, rows ten-year interval. match_capitals Capital coordinates stored separate geometry. multiple capitals year, withh included. capital names separated semicolon. exclude_sovereign Excludes maps states sovereign. year map within 5 years state sovereign, map still included.","code":""}]
