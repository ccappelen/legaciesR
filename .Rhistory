sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x))
}) %>%
dplyr::bind_rows()
smoothness_factor <- 2
lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob >= x - cut_interval & r_prob < x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x))
}) %>%
dplyr::bind_rows()
contour_polygons <- function(shp, cuts = 10,
smooth_method = c("ksmooth", "chaikin", "spline"), smoothness_factor = 2,
res = 1/60,
invalid_geom = c("none", "exclude", "fix")){
smooth_method <- match.arg(smooth_method)
invalid_geom <- match.arg(invalid_geom)
if(sf::st_crs(shp) != sf::st_crs("EPSG:4326")){
shp <- shp %>%
sf::st_transform(crs = 4326)
}
if(!all(sf::st_is_valid(shp))){
shp <- sf::st_make_valid(shp)
if(all(sf::st_is_valid(shp))){
warning("Some geometries are invalid. They have been fixed using sf::st_make_valid().
Consider checking spatial features before continuing.")
}
if(!all(sf::st_is_valid(shp))){
## Option exclude_invalid == "none"
if(invalid_geom == "none"){
stop("Invalid geometries: sf::st_make_valid() was unable to rebuild valid geometries.")
}
## Option exclude_invalid == "exclude"
if(invalid_geom == "exclude"){
shp <- shp[st_is_valid(shp), ]
if(!all(sf::st_is_valid(shp))) stop("Invalid features, unable to remove")
warning("Invalid geometries have been removed from the dataset.")
}
## Option exclude_invalid == "fix"
if(invalid_geom == "fix"){
shp_invalid <- TRUE
snap_prec <- 10000000
while(shp_invalid == TRUE & snap_prec >= 10){
shp <- st_make_valid(shp, s2_options = s2::s2_options(snap = s2::s2_snap_precision(snap_prec)))
shp_invalid <- !all(st_is_valid(shp))
if(snap_prec < 100){
snap_prec * 0.9
}else{
snap_prec * 0.5
}
}
if(shp_invalid == TRUE) stop("Invalid geometries: sf::st_make_valid() failed to rebuild
valid geometries withint acceptable snapping precision.")
warning("Some geometries are invalid. They have been fixed using sf::st_make_valid().
Consider checking spatial features before continuing.")
}
}
}
cuts <- cuts
n_maps <- nrow(shp)
if(cuts > n_maps){
cuts <- n_maps
}
shp_union <- sf::st_union(shp) %>%
sf::st_as_sf() %>%
suppressMessages()
r <- terra::rast(shp_union, resolution = res)
r_count <- terra::rasterize(shp, r, fun = "count")
r_prob <- r_count / n_maps
if(missing(cuts)){
stop("Error: Please specify the number of cuts. For example, if the polygons should be split into deciles, the number of cuts should be 10 (for quartiles it should be 4).")
}
cut_seq <- seq(from = 0, to = 1, length.out = cuts+1)[-1]
cut_interval <- 1/cuts
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob >= x - cut_interval & r_prob < x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x))
}) %>%
dplyr::bind_rows()
return(shp_smoothed)
}
df_list <- split(df, df$COWID)
df_contour_combine <- lapply(df_list,
FUN = function(x) contour_polygons(x))
contour_polygons(df_list[[1]], invalid_geom = "fix")
contour_polygons(df_list[[2]], invalid_geom = "fix")
contour_polygons(df_list[[3]], invalid_geom = "fix")
contour_polygons(df_list[[4]], invalid_geom = "fix")
df_list[[4]]
contour_polygons(df_list[[4]], invalid_geom = "fix")
contour_polygons(df_list[[5]], invalid_geom = "fix")
contour_polygons(df_list[[6]], invalid_geom = "fix")
contour_polygons(df_list[[7]], invalid_geom = "fix")
df_list[[6]]
contour_polygons(df_list[[7]], invalid_geom = "fix")
contour_polygons(df_list[[8]], invalid_geom = "fix")
df_list[[8]]
contour_polygons(df_list[[8]], invalid_geom = "exclude")
contour_polygons(df_list[[8]], invalid_geom = "fix")
contour_polygons(df_list[[8]], invalid_geom = "none")
contour_polygons(df_list[[8]], invalid_geom = "fix")
contour_polygons <- function(shp, cuts = 10,
smooth_method = c("ksmooth", "chaikin", "spline"), smoothness_factor = 2,
res = 1/60,
invalid_geom = c("none", "exclude", "fix")){
smooth_method <- match.arg(smooth_method)
invalid_geom <- match.arg(invalid_geom)
if(sf::st_crs(shp) != sf::st_crs("EPSG:4326")){
shp <- shp %>%
sf::st_transform(crs = 4326)
}
if(!all(sf::st_is_valid(shp))){
shp <- sf::st_make_valid(shp)
if(all(sf::st_is_valid(shp))){
warning("Some geometries are invalid. They have been fixed using sf::st_make_valid().
Consider checking spatial features before continuing.")
}
if(!all(sf::st_is_valid(shp))){
## Option exclude_invalid == "none"
if(invalid_geom == "none"){
stop("Invalid geometries: sf::st_make_valid() was unable to rebuild valid geometries.")
}
## Option exclude_invalid == "exclude"
if(invalid_geom == "exclude"){
shp <- shp[st_is_valid(shp), ]
if(!all(sf::st_is_valid(shp))) stop("Invalid features, unable to remove")
warning("Invalid geometries have been removed from the dataset.")
}
## Option exclude_invalid == "fix"
if(invalid_geom == "fix"){
shp_invalid <- TRUE
snap_prec <- 10000000
while(shp_invalid == TRUE & snap_prec >= 10){
shp <- st_make_valid(shp, s2_options = s2::s2_options(snap = s2::s2_snap_precision(snap_prec)))
shp_invalid <- !all(st_is_valid(shp))
if(snap_prec < 100){
snap_prec * 0.5
}else{
snap_prec * 0.5
}
}
if(shp_invalid == TRUE) stop("Invalid geometries: sf::st_make_valid() failed to rebuild
valid geometries withint acceptable snapping precision.")
warning("Some geometries are invalid. They have been fixed using sf::st_make_valid().
Consider checking spatial features before continuing.")
}
}
}
cuts <- cuts
n_maps <- nrow(shp)
if(cuts > n_maps){
cuts <- n_maps
}
shp_union <- sf::st_union(shp) %>%
sf::st_as_sf() %>%
suppressMessages()
r <- terra::rast(shp_union, resolution = res)
r_count <- terra::rasterize(shp, r, fun = "count")
r_prob <- r_count / n_maps
if(missing(cuts)){
stop("Error: Please specify the number of cuts. For example, if the polygons should be split into deciles, the number of cuts should be 10 (for quartiles it should be 4).")
}
cut_seq <- seq(from = 0, to = 1, length.out = cuts+1)[-1]
cut_interval <- 1/cuts
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob >= x - cut_interval & r_prob < x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x))
}) %>%
dplyr::bind_rows()
return(shp_smoothed)
}
contour_polygons(df_list[[8]], invalid_geom = "fix")
contour_polygons <- function(shp, cuts = 10,
smooth_method = c("ksmooth", "chaikin", "spline"), smoothness_factor = 2,
res = 1/60,
invalid_geom = c("none", "exclude", "fix")){
smooth_method <- match.arg(smooth_method)
invalid_geom <- match.arg(invalid_geom)
if(sf::st_crs(shp) != sf::st_crs("EPSG:4326")){
shp <- shp %>%
sf::st_transform(crs = 4326)
}
if(!all(sf::st_is_valid(shp))){
shp <- sf::st_make_valid(shp)
if(all(sf::st_is_valid(shp))){
warning("Some geometries are invalid. They have been fixed using sf::st_make_valid().
Consider checking spatial features before continuing.")
}
if(!all(sf::st_is_valid(shp))){
## Option exclude_invalid == "none"
if(invalid_geom == "none"){
stop("Invalid geometries: sf::st_make_valid() was unable to rebuild valid geometries.")
}
## Option exclude_invalid == "exclude"
if(invalid_geom == "exclude"){
shp <- shp[st_is_valid(shp), ]
if(!all(sf::st_is_valid(shp))) stop("Invalid features, unable to remove")
warning("Invalid geometries have been removed from the dataset.")
}
## Option exclude_invalid == "fix"
if(invalid_geom == "fix"){
shp_invalid <- TRUE
snap_prec <- 10000000
while(shp_invalid == TRUE & snap_prec >= 10){
shp <- st_make_valid(shp, s2_options = s2::s2_options(snap = s2::s2_snap_precision(snap_prec)))
shp_invalid <- !all(st_is_valid(shp))
if(snap_prec < 100){
snap_prec <- snap_prec * 0.5
}else{
snap_prec <- snap_prec * 0.5
}
}
if(shp_invalid == TRUE) stop("Invalid geometries: sf::st_make_valid() failed to rebuild
valid geometries withint acceptable snapping precision.")
warning("Some geometries are invalid. They have been fixed using sf::st_make_valid().
Consider checking spatial features before continuing.")
}
}
}
cuts <- cuts
n_maps <- nrow(shp)
if(cuts > n_maps){
cuts <- n_maps
}
shp_union <- sf::st_union(shp) %>%
sf::st_as_sf() %>%
suppressMessages()
r <- terra::rast(shp_union, resolution = res)
r_count <- terra::rasterize(shp, r, fun = "count")
r_prob <- r_count / n_maps
if(missing(cuts)){
stop("Error: Please specify the number of cuts. For example, if the polygons should be split into deciles, the number of cuts should be 10 (for quartiles it should be 4).")
}
cut_seq <- seq(from = 0, to = 1, length.out = cuts+1)[-1]
cut_interval <- 1/cuts
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob >= x - cut_interval & r_prob < x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x))
}) %>%
dplyr::bind_rows()
return(shp_smoothed)
}
contour_polygons(df_list[[8]], invalid_geom = "fix")
contour_polygons <- function(shp, cuts = 10,
smooth_method = c("ksmooth", "chaikin", "spline"), smoothness_factor = 2,
res = 1/60,
invalid_geom = c("none", "exclude", "fix")){
smooth_method <- match.arg(smooth_method)
invalid_geom <- match.arg(invalid_geom)
if(sf::st_crs(shp) != sf::st_crs("EPSG:4326")){
shp <- shp %>%
sf::st_transform(crs = 4326)
}
if(!all(sf::st_is_valid(shp))){
shp <- sf::st_make_valid(shp)
if(all(sf::st_is_valid(shp))){
warning("Some geometries are invalid. They have been fixed using sf::st_make_valid().
Consider checking spatial features before continuing.")
}
if(!all(sf::st_is_valid(shp))){
## Option exclude_invalid == "none"
if(invalid_geom == "none"){
stop("Invalid geometries: sf::st_make_valid() was unable to rebuild valid geometries.")
}
## Option exclude_invalid == "exclude"
if(invalid_geom == "exclude"){
shp <- shp[st_is_valid(shp), ]
if(!all(sf::st_is_valid(shp))) stop("Invalid features, unable to remove")
warning("Invalid geometries have been removed from the dataset.")
}
## Option exclude_invalid == "fix"
if(invalid_geom == "fix"){
shp_invalid <- TRUE
snap_prec <- 10000000
while(shp_invalid == TRUE & snap_prec >= 10){
shp <- st_make_valid(shp, s2_options = s2::s2_options(snap = s2::s2_snap_precision(snap_prec)))
shp_invalid <- !all(st_is_valid(shp))
if(snap_prec < 100){
snap_prec <- snap_prec * 0.9
}else{
snap_prec <- snap_prec * 0.5
}
}
if(shp_invalid == TRUE) stop("Invalid geometries: sf::st_make_valid() failed to rebuild
valid geometries withint acceptable snapping precision.")
warning("Some geometries are invalid. They have been fixed using sf::st_make_valid().
Consider checking spatial features before continuing.")
}
}
}
cuts <- cuts
n_maps <- nrow(shp)
if(cuts > n_maps){
cuts <- n_maps
}
shp_union <- sf::st_union(shp) %>%
sf::st_as_sf() %>%
suppressMessages()
r <- terra::rast(shp_union, resolution = res)
r_count <- terra::rasterize(shp, r, fun = "count")
r_prob <- r_count / n_maps
if(missing(cuts)){
stop("Error: Please specify the number of cuts. For example, if the polygons should be split into deciles, the number of cuts should be 10 (for quartiles it should be 4).")
}
cut_seq <- seq(from = 0, to = 1, length.out = cuts+1)[-1]
cut_interval <- 1/cuts
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob >= x - cut_interval & r_prob < x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x))
}) %>%
dplyr::bind_rows()
return(shp_smoothed)
}
contour_polygons(df_list[[8]], invalid_geom = "fix")
dd <- contour_polygons(df_list[[8]], invalid_geom = "fix")
dd %>%
ggplot() +
geom_sf()
df_list <- split(df, df$COWID)
df_contour_combine <- lapply(df_list,
FUN = function(x) contour_polygons(x))
df_contour_combine <- lapply(df_list,
FUN = function(x) contour_polygons(x, invalid_geom = "fix"))
df_contour_combine
df_contour_combine2 <- bind_rows(df_contour_combine)
df_contour_combine2
View(df_contour_combine2)
cuts <- cuts
n_maps <- nrow(shp)
if(cuts > n_maps){
cuts <- n_maps
}
cut_seq <- seq(from = 0, to = 1, length.out = cuts+1)[-1]
cut_interval <- 1/cuts
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob > x - cut_interval & r_prob <= x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x))
}) %>%
dplyr::bind_rows()
shp_smoothed
shp_union
shp
shp$COWID
shp_smoothed
cut_seq <- seq(from = 0, to = 1, length.out = cuts+1)[-1]
cut_interval <- 1/cuts
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob > x - cut_interval & r_prob <= x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x)) %>%
dplyr::mutate(layer = NULL) %>%
dplyr::mutate(COWID = cow_id,
COWNUM = cow_num)
}) %>%
dplyr::bind_rows()
cow_id <- shp$COWID[1]
cow_num <- shp$COWNUM[1]
cut_seq <- seq(from = 0, to = 1, length.out = cuts+1)[-1]
cut_interval <- 1/cuts
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob > x - cut_interval & r_prob <= x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x)) %>%
dplyr::mutate(layer = NULL) %>%
dplyr::mutate(COWID = cow_id,
COWNUM = cow_num)
}) %>%
dplyr::bind_rows()
shp_smoothed
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob > x - cut_interval & r_prob <= x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x)) %>%
dplyr::mutate(layer = NULL) %>%
dplyr::mutate(COWID = cow_id,
COWNUM = cow_num) %>%
dplyr::select(COWID, COWNUM)
}) %>%
dplyr::bind_rows()
shp_smoothed
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob > x - cut_interval & r_prob <= x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(prob = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x)) %>%
dplyr::mutate(COWID = cow_id,
COWNUM = cow_num) %>%
dplyr::select(COWID, COWNUM, prob, label)
}) %>%
dplyr::bind_rows()
shp_smoothed
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob > x - cut_interval & r_prob <= x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(cut = x) %>%
dplyr::mutate(label = paste0((x-cut_interval), "-", x)) %>%
dplyr::mutate(COWID = cow_id,
COWNUM = cow_num) %>%
dplyr::select(COWID, COWNUM, cut, label)
}) %>%
dplyr::bind_rows()
shp_smoothed
shp_smoothed <- lapply(
cut_seq,
FUN = function(x){
terra::ifel(r_prob > x - cut_interval & r_prob <= x, 1, NA) %>%
terra::as.polygons() %>%
sf::st_as_sf() %>%
smoothr::smooth(method = smooth_method, smoothness = smoothness_factor) %>%
dplyr::mutate(cut = x) %>%
dplyr::mutate(prob_interval = paste0((x-cut_interval), "-", x)) %>%
dplyr::mutate(COWID = cow_id,
COWNUM = cow_num) %>%
dplyr::select(COWID, COWNUM, cut, prob_interval)
}) %>%
dplyr::bind_rows()
shp_smoothed
roxygenize()
rm(contour_polygons())
rm(contour_polygons)
roxygenize()
uniroot(x^2+2)
uniroot(~ x^2+2)
?uniroot
uniroot(~ x^2+2, interval = c(-Inf,Inf))
uniroot(function(x) x^2 + 2, interval = c(-Inf,Inf))
uniroot(function(x) x^2 + 2, interval = c(-100,100))
uniroot(f = function(x) x^2 + 2, interval = c(-100,100))
f <-
uniroot(function (x, a) x - a, c(0, 1), tol = 0.0001, a = 1/3)
uniroot(function (x, a) x - a, c(0, 1), tol = 0.0001, a = 1/3)
uniroot(function (x, a) x^2, tol = 0.0001, a = 1/3)
uniroot(function (x, a) x^2, c(0, 1), tol = 0.0001, a = 1/3)
uniroot(function (x, a) x^2 + 2, c(0, 1), tol = 0.0001, a = 1/3)
uniroot(function (x, a) x^2+2, c(0, 1), tol = 0.0001, a = 1/3)
uniroot(function (x, a) x^2+2x, c(0, 1), tol = 0.0001, a = 1/3)
uniroot(function (x, a) x^2+2x, lower = -10, upper = 10, tol = 0.0001, a = 1/3)
uniroot(function (x, a) x^2 + 2x, lower = -10, upper = 10, tol = 0.0001, a = 1/3)
uniroot(function (x) x^2 + 2x, lower = -10, upper = 10, tol = 0.0001, a = 1/3)
uniroot(function (x) x^2, lower = -10, upper = 10, tol = 0.0001, a = 1/3)
uniroot(function (x) x^2, lower = -10, upper = 10, tol = 0.0001)
uniroot(function (x,a) x^2, lower = -10, upper = 10, tol = 0.0001, a = 1/3)
uniroot(function (x) x^2, lower = -10, upper = 10, tol = 0.0001)
uniroot(function (x) x^2, lower = 10, upper = 10, tol = 0.0001)
uniroot(function (x) x^2, lower = 10, upper = -10, tol = 0.0001)
uniroot(function (x) x^2, lower = 9, upper = -10, tol = 0.0001)
uniroot(function (x) x^2, lower = 9, upper = 10, tol = 0.0001)
optimise(function(x) x^2)
optimise(function(x) x^2, interval = c(-10,10))
optimise(function(x) -x^2, interval = c(-10,10))
?optimise
optimise(function(x) -x^2, interval = c(-10,10), maximum = T)
